#!/bin/bash


# Check if root
user=$(whoami)
if [[ "$user" != "root" ]];
then
	echo "Error: Must be run as root"
	exit
fi

# Crontab
crontime="0 1 * * 4 root /bin/bash $directory/automaticupdates"

# This is what Grep looks for inside of crontime to see if it's there or not. It struggles to look for the entire thing due to (*) character, so this is the alternative.
searchquery="automaticupdates"

# Github Links (edit these to change where it pulls scripts from)
adjoin="https://raw.githubusercontent.com/gorgdel/EzLinux/master/files/adjoin"
automaticupdates="https://raw.githubusercontent.com/gorgdel/EzLinux/master/files/automaticupdates"
bashrc="https://raw.githubusercontent.com/gorgdel/EzLinux/master/files/bash.bashrc"

# File Location
directory="/scripts"

# Create Scripts Directory

 if [ ! -d $directory/ ]
  then
  mkdir $directory/
  echo "Directory Created"
  sleep 0.5
fi


settings () {
    HEIGHT1=15
    WIDTH1=65
    CHOICE_HEIGHT1=6
    TITLE1="Settings"
    MENU1="Choose one of the following options:"

    OPTIONS1=("<-- Back" "Return to the main menu "
							"AD Settings" " --> "
              "Enable Root SSH" ""
              "Disable Root SSH" ""
              "Add Better Colours to Terminal/Configs" "")

    CHOICE2=$(whiptail --clear \
            --backtitle "$BACKTITLE1" \
            --title "$TITLE1" \
            --menu "$MENU1" \
            --nocancel \
            $HEIGHT1 $WIDTH1 $CHOICE_HEIGHT1 \
            "${OPTIONS1[@]}" \
        2>&1 >/dev/tty)

    clear

    case $CHOICE2 in

			"<-- Back")
			main
			;;

			"AD Settings")
			ad-settings
			;;

      "Enable Root SSH")
        if (whiptail --title "SSH Settings" --yesno "This is potentially dangerous. SSH Will restart." 8 78); then
        sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        systemctl restart sshd
      else
        settings
      fi

      whiptail --title "Root SSH Changed" --msgbox "Root SSH Successfully Enabled" 8 78
      settings
      ;;

        "Disable Root SSH")
        if (whiptail --title "SSH Settings" --yesno "This will disable Root SSH. SSH Will restart." 8 78); then
        sed -i 's/PermitRootLogin yes/#PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
        systemctl restart sshd
      else
        settings
      fi

      whiptail --title "Root SSH Changed" --msgbox "Root SSH Successfully Disabled" 8 78
      settings
      ;;

      "Add Better Colours to Terminal/Configs")
      rm /etc/bash.bashrc
      curl -L "$bashrc" --output /etc/bash.bashrc
      whiptail --title "Bashrc Updated" --msgbox "Reboot Required To See Changes" 8 78
      settings
      ;;

esac

}


# AD Settings
ad-settings (){
	HEIGHT1=10
	WIDTH1=45
	CHOICE_HEIGHT1=4
	TITLE1="AD Settings"
	MENU1="Choose one of the following options:"

	OPTIONS1=("<-- Back" "Return to the main menu "
						"Change AD Domain" ""
						"Set AD Account" ""
						"Set OU" "")

	CHOICE2=$(whiptail --clear \
					--backtitle "$BACKTITLE1" \
					--title "$TITLE1" \
					--menu "$MENU1" \
					--nocancel \
					$HEIGHT1 $WIDTH1 $CHOICE_HEIGHT1 \
					"${OPTIONS1[@]}" \
			2>&1 >/dev/tty)

	clear

	case $CHOICE2 in

		"<-- Back")
		settings
		;;

		"Change AD Domain")

		if [ ! -f $directory/adjoin ]
		 then
		 curl -L "$adjoin" --output $directory/adjoin
	 fi

	 		domain=$(\
  		whiptail --title "Choose AD Domain" \
      --inputbox "Enter Domain Name:" 8 40 \
  			3>&1 1>&2 2>&3 3>&- \
				)
				exitstatus=$?
				if [ $exitstatus = 0 ]; then

					olddomain=$(grep "domain=" $directory/adjoin)
	 			 sed -i "s/$olddomain/domain=$domain/g" $directory/adjoin
			 else
				 ad-settings
			 fi

			 whiptail --title "Domain Changed" --msgbox "Domain Successfully Changed to $domain" 8 78
			 ad-settings

				;;

				"Set AD Account")

				if [ ! -f $directory/adjoin ]
				 then
				 curl -L "$adjoin" --output $directory/adjoin
			 fi

				username=$(
	  		whiptail --title "AD Username & Password" \
	      --inputbox "Enter Domain Username:" 8 40 \
				--ok-button "Set Username" \
	  			3>&1 1>&2 2>&3 3>&- \
					)

					exitstatus=$?
					if [ $exitstatus = 0 ]; then

						olddomainuser=$(grep "domain_user=" $directory/adjoin)
	 				 sed -i "s/$olddomainuser/domain_user=$username/g" $directory/adjoin
				 else
					 ad-settings
				 fi

					password=$(whiptail --passwordbox "Enter Your Password" 8 70 \
					--title "New Password" \
					3>&1 1>&2 2>&3 3>&- \
					)

					exitstatus=$?
					if [ $exitstatus = 0 ]; then
						olddomainpassword=$(grep "domain_user_password=" $directory/adjoin)
						sed -i "s/$olddomainpassword/domain_user_password=$password/g" $directory/adjoin
				 else
					 ad-settings
				 fi
				 whiptail --title "Username & Password Changed" --msgbox "Username & Password Successfully Changed" 8 78
				 ad-settings

					;;

					"Set OU")
					ou=$(\
					whiptail --title "Change OU" \
					--inputbox "Enter OU                            			                     Use Distingused Name: OU=,OU=,DC=,DC=" 10 50 \
					3>&1 1>&2 2>&3 3>&- \
					)
          exitstatus=$?
					if [ $exitstatus = 0 ]; then
						oldou=$(grep "ou=" $directory/adjoin)
						sed -i "s/$oldou/ou=$ou/g" $directory/adjoin
				 else
					 ad-settings
				 fi
         whiptail --title "OU Changed" --msgbox "OU Successfully Changed to $ou" 8 78
					ad-settings
					;;


	esac

}


# Whip
main (){
HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
TITLE="EZLinux"
MENU="Choose one of the following options:"

OPTIONS=(	"AD-Join" ""
         "Automatic Updates" ""
				 "Full Installation" ""
				 "Settings"	" --> ")

CHOICE=$(whiptail --clear \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear

case $CHOICE in
        "AD-Join") #AD-Join
          curl -L "$adjoin" --output $directory/adjoin-server
          bash $directory/adjoin-server
					whiptail --title "AD-Join Installed" --msgbox "AD-Join Installed Successfully" 8 78
	        main
          ;;

        "Automatic Updates") #Create Automatic Updates
          curl -L "$automaticupdates" --output $directory/automaticupdates
          chmod +x $directory/automaticupdates

					if grep -q "$searchquery" /etc/crontab;
					  then
							echo 'exists'
						else
							echo 'does not exist...adding'
							echo "$crontime" >> /etc/crontab
							echo 'added...'
					fi
					main
          ;;

        "Full Installation") #Full Installation

        echo "starting ad-join"
        curl -L "$adjoin" --output $directory/adjoin
        bash $directory/adjoin-servers
				echo "Complete"
				sleep 2
				#Updates
        echo "starting automatic-updates"
        curl -L "$automaticupdates" --output $directory/automaticupdates
        chmod +x $directory/automaticupdates

				#Crontab
				if grep -q "$searchquery" /etc/crontab;
					then
						echo 'exists'
					else
						echo 'does not exist...adding'
						echo "$crontime" >> /etc/crontab
						echo 'added...'
				fi
				main
        ;;

				"Settings") #Settings
				settings
				;;
esac
}

run-updates () {

if [ ! -f "/etc/ezlinux.d/silent-updates.conf" ]; then
  mkdir /etc/ezlinux.d/
  touch /etc/ezlinux.d/silent-updates.conf
  echo "silent-updates=true" >> /etc/ezlinux.d/silent-updates.conf
  whiptail --title "Install Packages" --msgbox "Please Install required packages" 8 78
    apt-get update
    apt-get -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    bsd-mailx \
    realmd \
    ntp \
    adcli \
    sssd \
    git \
    libnss-sss \
    libpam-sss \
    packagekit \
    libsss-sudo \
    samba-common-bin \
    sudo
    whiptail --title "Installed Packages" --msgbox "Packages have been installed Successfully" 8 78
    main
    else
      main
    fi
}

run-updates
